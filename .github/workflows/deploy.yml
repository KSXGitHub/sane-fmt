name: Deployment

on:
  push:
    tags:
      - '*.*.*'

env:
  # Enable symbolic links on Windows
  MSYS: winsymlinks:nativestrict
  CYGWIN: winsymlinks:nativestrict

jobs:
  test:
    name: Test

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Enable symbolic link for Git on Windows
        if: runner.os == 'Windows'
        run: |
          git config --global core.symlinks true
          git config --system core.symlinks true

      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: test-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-build-${{ matrix.rust }}-${{ runner.os }}-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: clippy rustfmt
          override: true
          default: true

      - name: Build
        run: cargo build --locked

      - name: Test on Linux and Windows
        if: runner.os == 'Linux' || runner.os == 'Windows'
        run: cargo test

      - name: Install GNU utilities for macOS
        if: runner.os == 'macOS'
        run: brew install coreutils

      - name: Test on macOS
        if: runner.os == 'macOS'
        run: |
          export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
          cargo test

      - name: Check formatting
        if: runner.os == 'Linux'
        run: ./fmt.sh --check

      - name: Clippy check
        if: runner.os == 'Linux'
        run: ./clippy.sh

  build:
    name: Build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: build-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: build-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-index-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: build-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            build-build-${{ matrix.rust }}-${{ runner.os }}-

      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: ${{ matrix.target }}
          override: true
          default: true

      - name: Upload build artifact
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: sane-fmt-${{ runner.os }}
          path: target/release/sane-fmt

  release:
    name: Release

    needs:
      - test
      - build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2.0

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload Linux executable
        id: upload_release_asset_linux
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-Linux/sane-fmt
          asset_name: sane-fmt-linux
          asset_content_type: application/x-pie-executable

      - name: Upload macOS executable
        id: upload_release_asset_macos
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-macOS/sane-fmt
          asset_name: sane-fmt-macos
          asset_content_type: application/x-pie-executable

      - name: Upload Windows executable
        id: upload_release_asset_windows
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-Windows/sane-fmt.exe
          asset_name: sane-fmt-windows
          asset_content_type: application/vnd.microsoft.portable-executable
