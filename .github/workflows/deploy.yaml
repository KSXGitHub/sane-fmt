name: Deployment

on:
  push:
    tags:
      - '*.*.*'

env:
  # Enable symbolic links on Windows
  MSYS: winsymlinks:nativestrict
  CYGWIN: winsymlinks:nativestrict

jobs:
  test:
    name: Test

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Enable symbolic link for Git on Windows
        if: runner.os == 'Windows'
        run: |
          git config --global core.symlinks true
          git config --system core.symlinks true

      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-cargo-registry-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-cargo-index-${{ matrix.rust }}-${{ runner.os }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: test-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-build-${{ matrix.rust }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            test-build-${{ matrix.rust }}-${{ runner.os }}-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --locked

      - name: Test on Linux and Windows
        if: runner.os == 'Linux' || runner.os == 'Windows'
        run: cargo test

      - name: Install GNU utilities for macOS
        if: runner.os == 'macOS'
        run: brew install coreutils

      - name: Test on macOS
        if: runner.os == 'macOS'
        run: |
          export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
          cargo test

      - name: Check formatting
        if: runner.os == 'Linux'
        run: ./fmt.sh --check

      - name: Clippy check
        if: runner.os == 'Linux'
        run: ./clippy.sh

  build_on_linux:
    name: Build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-build-${{ matrix.rust }}-${{ matrix.target }}-

      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifact (non-WASM)
        if: "!contains(matrix.target, 'wasm')"
        uses: actions/upload-artifact@v2
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt

      - name: Upload build artifact (WASM)
        if: contains(matrix.target, 'wasm')
        uses: actions/upload-artifact@v2
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt.wasm

  build_on_macos:
    name: Build

    runs-on: macos-latest

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        target:
          - x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-build-${{ matrix.rust }}-${{ matrix.target }}-

      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt

  build_on_windows:
    name: Build

    runs-on: windows-latest

    strategy:
      fail-fast: true
      matrix:
        rust:
          - '1.43.0'
        target:
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v2

      - name: Cache Rust Cargo Registry
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/registry
          key: build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-registry-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Cargo Index
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: ~/.cargo/git
          key: build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-cargo-index-${{ matrix.rust }}-${{ matrix.target }}-

      - name: Cache Rust Build
        uses: actions/cache@v1.1.2
        timeout-minutes: 1
        continue-on-error: true
        with:
          path: target
          key: build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-build-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            build-build-${{ matrix.rust }}-${{ matrix.target }}-

      - uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt.exe

  create_release:
    name: Create Release

    needs:
      - test
      - build_on_linux
      - build_on_macos
      - build_on_windows

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: 'false'
          prerelease: 'true'

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - create_release
      - test
      - build_on_linux
      - build_on_macos
      - build_on_windows

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2.0

      - name: Release executable (non-Windows, non-WASM)
        if: "!contains(matrix.target, 'windows') && !contains(matrix.target, 'wasm')"
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-${{ matrix.target }}/sane-fmt
          asset_name: sane-fmt-${{ matrix.target }}
          asset_content_type: application/x-pie-executable

      - name: Release executable (WASM)
        if: contains(matrix.target, 'wasm')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-${{ matrix.target }}/sane-fmt.wasm
          asset_name: sane-fmt-${{ matrix.target }}.wasm
          asset_content_type: application/wasm

      - name: Release executable (Windows)
        if: contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt-${{ matrix.target }}/sane-fmt.exe
          asset_name: sane-fmt-${{ matrix.target }}.exe
          asset_content_type: application/x-dosexec

  upload_checksums:
    name: Upload Checksums

    needs:
      - create_release
      - test
      - build_on_linux
      - build_on_macos
      - build_on_windows

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2.0
        with:
          path: ./downloads

      - name: Flatten directory
        run: ./ci/github-actions/expose-release-artifacts.sh

      - name: Create checksums
        run: ./ci/github-actions/create-checksums.sh

      - name: Release sha1sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha1sum.txt
          asset_name: sha1sum.txt
          asset_content_type: text/plain

      - name: Release sha256sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha256sum.txt
          asset_name: sha256sum.txt
          asset_content_type: text/plain

      - name: Release sha512sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha512sum.txt
          asset_name: sha512sum.txt
          asset_content_type: text/plain
